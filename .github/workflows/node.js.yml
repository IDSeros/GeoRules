# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x, 24.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

      # -------------------------
    # SonarCloud / SonarQube
    # -------------------------
  sonar:
      name: Sonar analysis (sonar-scanner CLI, no Docker)
      runs-on: ubuntu-latest
      needs: build
      steps:
        - uses: actions/checkout@v4

        # JDK necesario para sonar-scanner
        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: '17'

        # (Opcional) Instalar Node si necesitas construir antes de analizar
        - name: Use Node.js 18 (build for TS/transpilation if needed)
          uses: actions/setup-node@v4
          with:
            node-version: '18'
        - name: Install Node deps (optional)
          run: npm ci

        - name: Build (optional - if your project requires it for analysis)
          run: npm run build --if-present

        - name: Download and unpack SonarScanner CLI
          run: |
            SCANNER_VER=4.8.0.2856
            SCANNER_ZIP=sonar-scanner-cli-${SCANNER_VER}-linux.zip
            curl -sSL -o $SCANNER_ZIP https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/$SCANNER_ZIP
            unzip -q $SCANNER_ZIP -d sonar-scanner
            ls -la sonar-scanner
            export PATH="$PWD/sonar-scanner/sonar-scanner-${SCANNER_VER}/bin:$PATH"
            sonar-scanner -v

        - name: Run sonar-scanner
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            export PATH="$PWD/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin:$PATH"
            # Replace the following values:
            #  -Dsonar.projectKey: el projectKey que configuraste en SonarCloud / SonarQube
            #  -Dsonar.organization: solo necesario para SonarCloud
            #  -Dsonar.host.url: https://sonarcloud.io para SonarCloud, o tu SonarQube URL
            sonar-scanner \
              -Dsonar.projectKey=IDSeros_GeoRules \
              -Dsonar.organization=idseros \
              -Dsonar.sources=. \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN}


  # -------------------------
  # OWASP ZAP (baseline)
  # -------------------------
  zap:
    name: OWASP ZAP baseline scan
    runs-on: ubuntu-latest
    needs: build
    env:
      ZAP_TARGET: 'https://georules.onrender.com'
      ZAP_REPORT: zap_report.html
    steps:
      - uses: actions/checkout@v4

      # Instalar dependencias si la app necesita un servidor local para escanear
      - name: Install dependencies
        run: npm ci

      - name: Run ZAP baseline scan
        # Baseline scan action (rápida y segura para CI). Ajusta versión si quieres.
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ env.ZAP_TARGET }}
          # Exclude or additional args can be added here, e.g. rules, context file, etc.
          # example: args: '-r 1024 -I'
      - name: Upload ZAP report artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: ${{ env.ZAP_REPORT }}